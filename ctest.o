defmodule Elxcomp do
def builtin([:fact|args],y,env,def,n) do
try do
env1= Prove.unify(args,[0,1],env)
if env1 != false do
if Prove.prove_all(y,env1,def,n+1) == true do
throw {true,env,def}
end
end
env2= Prove.unify(args,[{:N,n},{:A,n}],env)
if env2 != false do
if Prove.prove([[:builtin,[:is,{:N1,n},[:formula,[:-,{:N,n},1]]]],[[:builtin,[:fact,{:N1,n},{:A1,n}]],[[:builtin,[:is,{:A,n},[:formula,[:*,{:N,n},{:A1,n}]]]]]]],y,env2,def,n+1) == true do
throw {true,env,def}
end
end
{false,env,def}
catch
x -> x
end
end
end
